/* eslint max-lines: ['warn', { max: 99, skipBlankLines: true }] */
import { config } from 'dotenv'
import isEmpty from 'lodash.isempty'
import createDb from '@rampant-firebase/db'
import witPlugin from '@rampant-wit/plugin'
import corePlugin from '@rampant-core/plugin'
import { mergeMap, map } from 'rxjs/operators'
import mixerPlugin from '@rampant-mixer/plugin'
import createIntentEngine from '@rampant/engine'
import twitterPlugin from '@rampant-twitter/plugin'
import firebasePlugin from '@rampant-firebase/plugin'
import { createLogger, prettify } from '@rampant/logger'
import completionPlugin from '@rampant-completion/plugin'
import projectSourceCreator from '@rampant/project-source-creator'

config()

const {
    MIXER_CLIENT_ID: clientId,
    DATABASE_ID: dbId,
    WIT_TOKEN: token,
    TWITTER_KEY: consumerKey,
    TWITTER_SECRET: consumerSecret,
    LOG_LEVEL,
} = process.env

export const logger = createLogger({ level: LOG_LEVEL })
export const db = createDb({ id: dbId, logger })

export const importProject = (name, { settings = {}, intents = [] }) => {
    logger.platform(`Importing project [${name}]...`)
    return Promise.all([
        isEmpty(settings)
            ? Promise.resolve()
            : db.upsert(`projects/${name}`, settings),
        ...intents.map(intent =>
            db.set(`projects/${name}/intents/${intent.name}`, intent)
        ),
    ])
}

export const exportProject = name => {
    logger.platform(`Exporting project [${name}]...`)
    return Promise.all([
        db.get(`projects/${name}`),
        db.get(`projects/${name}/intents`),
    ]).then(([settings = {}, intents = {}]) => ({
        settings,
        intents: Object.values(intents),
    }))
}

export const deleteProject = name => {
    logger.platform(`Deleting project [${name}]...`)
    return db.remove(`projects/${name}`)
}

export const start = ({ projectId, level = LOG_LEVEL }) => {
    logger.changeLevel({ level })
    logger.platform(`Logging level set to: [${level}]`)
    logger.platform(`Starting up [${projectId}] project...`)

    const core = corePlugin()
    const completion = completionPlugin()
    const firebase = firebasePlugin({ projectId, db })
    const mixer = mixerPlugin({ clientId, db, logger })
    const wit = witPlugin({ token, projectId, db, logger })
    const twitter = twitterPlugin({ consumerKey, consumerSecret, db })
    const intentEngine = createIntentEngine({
        plugins: { core, firebase, mixer, completion, wit, twitter },
    })

    firebase
        .projectSettings()
        .then(() => projectSourceCreator({ logger, intentEngine }))
        .then(() => {
            logger.platform('Setting up Intent Stream...')
            return firebase
                .intentStream()
                .pipe(
                    map(change => ({
                        id: change.doc.id,
                        type: change.type,
                        new: change.doc.data(),
                    })),
                    mergeMap(change => {
                        const { id, type, new: newValue } = change

                        if (type === 'added')
                            return intentEngine
                                .addIntent(id, newValue)
                                .then(() => change)
                        if (type === 'removed')
                            return Promise.resolve(
                                intentEngine.removeIntent(id)
                            ).then(() => change)

                        return Promise.resolve(change)
                    }, 1)
                )
                .subscribe(
                    ({ id, type, new: intent }) => {
                        logger.detail(`Intent [${id}] was ${type}`)
                        logger.debug(prettify(intent))
                    },
                    err => logger.error(err),
                    () => logger.platform('Intent Stream Complete')
                )
        })
}

export default start

process.on('unhandledRejection', error => {
    logger.error(error)
    logger.error(error.stack)
})

import get from '@rampant/get'
import { tap } from 'rxjs/operators'
import createMixerChat from '@rampant-mixer/chat'
import { createStub, prettify } from '@rampant/logger'

const stubLogger = createStub()

export default ({ clientId, db, logger: baseLogger = stubLogger }) => {
    const logger = baseLogger.child({ plugin: 'mixer' })
    const mixerChat = createMixerChat({ clientId, db })

    logger.plugin('Mixer Chatbot Creator Initialized')

    return {
        sources: {
            'mixer-chat': ({ channelId, userId }) => {
                logger.extend(`Watching [${channelId}] chat as [${userId}]`)
                return mixerChat({ channelId, userId })
            },
        },
        effects: {
            message: ({ text, userId, channelId }) =>
                tap(() => {
                    logger.extend(
                        `Posting message [${text}] as user [${userId}] on channel [${channelId}]`
                    )
                    mixerChat({ channelId, userId }).then(chat =>
                        chat.message(text).then(message => {
                            logger.detail(
                                `Message [${text}] posted as user [${userId}] on channel [${channelId}]`
                            )
                            logger.debug(prettify(message))
                        })
                    )
                }),
            whisper: ({ text, userId, channelId }) =>
                tap(({ params: { user_name: userName } }) => {
                    logger.extend(
                        `Whispering message [${text}] as user [${userId}] to recipient [${userName}] on channel [${channelId}]`
                    )
                    mixerChat({ channelId, userId }).then(chat =>
                        chat.whisper(userName, text).then(whisper => {
                            logger.detail(
                                `Whisper [${text}] sent as user [${userId}] to recipient [${userName}] on channel [${channelId}]`
                            )
                            logger.debug(prettify(whisper))
                        })
                    )
                }),
            'mixer-delete': ({ userId, channelId, messageId }) =>
                tap(payload => {
                    logger.extend(
                        `Deleting message [${messageId}] as user [${userId}] on channel [${channelId}]`
                    )
                    mixerChat({ channelId, userId }).then(chat => {
                        const id = get({ $: payload }, messageId)
                        chat.erase(id).then(result => {
                            logger.detail(
                                `Deleted [${messageId}] as user [${userId}] on channel [${channelId}]`
                            )
                            logger.debug(prettify(result))
                        })
                    })
                }),
        },
    }
}
